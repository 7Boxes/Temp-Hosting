import discord
from discord.ext import commands
from discord import app_commands
import json
import os
import difflib
import random
import re
from typing import Literal, Optional, Dict, List, Set

# Initialize bot
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

# Configuration
CONFIG_FILE = "bot_config.json"
USER_SETTINGS_FILE = "user_settings.json"
DEFAULT_CONFIG = {
    "channels": {
        "top": None,
        "fuzzy": None,
        "search": None,
        "view": None,
        "report": None,
        "settings": None
    },
    "embed_color": 0x3498db,
    "admin_roles": []
}

# Emojis for better UX
EMOJIS = {
    "top": "üìà",
    "fuzzy": "üîç",
    "search": "üîé",
    "view": "üëÅÔ∏è",
    "report": "‚ö†Ô∏è",
    "settings": "‚öôÔ∏è",
    "rarity": "‚ú®",
    "pet": "üêæ",
    "stat": "üìä",
    "tag": "üè∑Ô∏è",
    "admin": "üõ°Ô∏è",
    "refresh": "üîÑ",
    "success": "‚úÖ",
    "error": "‚ùå",
    "info": "‚ÑπÔ∏è",
    "bubbles": "üí≠",
    "coins": "ü™ô",
    "gems": "üíé",
    "tickets": "üé´"
}

# Load pet data
def load_pet_data():
    try:
        with open("/storage/emulated/0/Download/Place_85896571713843_Script_1750291259.txt", "r", encoding="utf-8") as f:
            content = f.read()
            # Extract the Lua table part
            start = content.find("{")
            end = content.rfind("}") + 1
            lua_table = content[start:end]
            
            # Convert Lua table to Python dict
            pets = {}
            pet_entries = [e.strip() for e in lua_table.split("\n") if "=" in e]
            
            for entry in pet_entries:
                if not entry.strip():
                    continue
                    
                # Split name and data
                name_part, data_part = entry.split("=", 1)
                name = name_part.strip().strip('"').strip("'").strip("[").strip("]").strip()
                
                # Parse the PetBuilder chain
                pet_data = {
                    "name": name,
                    "rarity": "Common",
                    "stats": {},
                    "images": [],
                    "limited": False,
                    "tags": []
                }
                
                # Process each method call
                methods = [m.strip() for m in data_part.split(":") if m.strip()]
                for method in methods[1:]:  # Skip the initial new()
                    if "(" in method:
                        method_name = method.split("(")[0]
                        args_part = method.split("(")[1].split(")")[0]
                        args = [a.strip().strip('"').strip("'") for a in args_part.split(",") if a.strip()]
                        
                        if method_name == "Rarity":
                            pet_data["rarity"] = args[0]
                        elif method_name == "Stat":
                            stat_name = args[0]
                            stat_value = float(args[1]) if "." in args[1] else int(args[1])
                            pet_data["stats"][stat_name] = stat_value
                        elif method_name == "Image":
                            pet_data["images"] = args
                        elif method_name == "Limited":
                            pet_data["limited"] = True
                        elif method_name == "Tag":
                            pet_data["tags"].extend([tag.strip('"').strip("'") for tag in args])
                        elif method_name == "HideInTerminal":
                            pet_data["hide_in_terminal"] = True
                
                pets[name] = pet_data
                
            return pets
    except Exception as e:
        print(f"Error loading pet data: {e}")
        return {}

# Load config
def load_config():
    try:
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, "r") as f:
                return json.load(f)
    except:
        pass
    return DEFAULT_CONFIG.copy()

# Save config
def save_config(config):
    with open(CONFIG_FILE, "w") as f:
        json.dump(config, f, indent=2)

# Load user settings
def load_user_settings():
    try:
        if os.path.exists(USER_SETTINGS_FILE):
            with open(USER_SETTINGS_FILE, "r") as f:
                return json.load(f)
    except:
        pass
    return {}

# Save user settings
def save_user_settings(settings):
    with open(USER_SETTINGS_FILE, "w") as f:
        json.dump(settings, f, indent=2)

# Global variables
pet_data = load_pet_data()
config = load_config()
user_settings = load_user_settings()

# Helper functions
def get_embed(title="", description="", color=None, user_id=None):
    if color is None:
        color = config.get("embed_color", 0x3498db)
    embed = discord.Embed(title=title, description=description, color=color)
    
    # Apply user blacklist if exists
    if user_id:
        settings = user_settings.get(str(user_id), {})
        for field in ["title", "description", "footer"]:
            if field in settings.get("blacklist", []):
                if field == "title":
                    embed.title = ""
                elif field == "description":
                    embed.description = ""
                elif field == "footer":
                    embed.remove_footer()
    
    if random.random() < 0.01:  # 1% chance
        embed.set_footer(text="made by jajtxs_")
    return embed

def is_admin(interaction: discord.Interaction):
    if interaction.user.guild_permissions.administrator:
        return True
    admin_roles = config.get("admin_roles", [])
    return any(role.id in admin_roles for role in interaction.user.roles)

def fuzzy_search(query, choices, cutoff=0.6):
    results = []
    for choice in choices:
        ratio = difflib.SequenceMatcher(None, query.lower(), choice.lower()).ratio()
        if ratio >= cutoff:
            results.append((choice, ratio))
    results.sort(key=lambda x: x[1], reverse=True)
    return [r[0] for r in results]

def get_pet_variants(pet_name):
    pet = pet_data.get(pet_name)
    if not pet or not pet.get("images"):
        return None
    
    images = pet["images"]
    variants = {
        "Normal": {
            "image": f"https://ps99.biggamesapi.io/image/{images[0].replace('rbxassetid://', '')}" if len(images) >= 1 else None,
            "stats": pet["stats"]
        },
        "Shiny": {
            "image": f"https://ps99.biggamesapi.io/image/{images[1].replace('rbxassetid://', '')}" if len(images) >= 2 else None,
            "stats": {k: round(v * 1.5) for k, v in pet["stats"].items()}
        },
        "Mythic": {
            "image": f"https://ps99.biggamesapi.io/image/{images[2].replace('rbxassetid://', '')}" if len(images) >= 3 else None,
            "stats": {k: round(v * 1.75) for k, v in pet["stats"].items()}
        },
        "Shiny Mythic": {
            "image": f"https://ps99.biggamesapi.io/image/{images[3].replace('rbxassetid://', '')}" if len(images) >= 4 else None,
            "stats": {k: round(v * 2.25) for k, v in pet["stats"].items()}
        }
    }
    
    return variants

def get_channel_id(command_name):
    return config.get("channels", {}).get(command_name)

def get_sorted_pet_names():
    return sorted(pet_data.keys())

def get_unique_rarities():
    return sorted(set(pet["rarity"] for pet in pet_data.values()))

def get_unique_tags():
    tags = set()
    for pet in pet_data.values():
        for tag in pet.get("tags", []):
            tags.add(tag)
    return sorted(tags)

def get_unique_stats():
    stats = set()
    for pet in pet_data.values():
        for stat in pet.get("stats", {}).keys():
            stats.add(stat)
    return sorted(stats)

# Dropdown for pet selection
class PetSelect(discord.ui.Select):
    def __init__(self, placeholder, min_values=1, max_values=1, custom_id="pet_select"):
        pet_names = get_sorted_pet_names()
        options = [
            discord.SelectOption(label=name, emoji=EMOJIS["pet"], description=f"Select {name}")
            for name in pet_names
        ]
        super().__init__(
            placeholder=placeholder,
            min_values=min_values,
            max_values=max_values,
            options=options,
            custom_id=custom_id
        )
    
    async def callback(self, interaction: discord.Interaction):
        await interaction.response.defer()

# Dropdown for rarity selection
class RaritySelect(discord.ui.Select):
    def __init__(self, placeholder, min_values=1, max_values=1, custom_id="rarity_select"):
        rarities = get_unique_rarities()
        options = [
            discord.SelectOption(label=rarity, emoji=EMOJIS["rarity"], description=f"Select {rarity}")
            for rarity in rarities
        ]
        super().__init__(
            placeholder=placeholder,
            min_values=min_values,
            max_values=max_values,
            options=options,
            custom_id=custom_id
        )
    
    async def callback(self, interaction: discord.Interaction):
        await interaction.response.defer()

# Dropdown for stat selection
class StatSelect(discord.ui.Select):
    def __init__(self, placeholder, min_values=1, max_values=1, custom_id="stat_select"):
        stats = get_unique_stats()
        options = [
            discord.SelectOption(label=stat, emoji=EMOJIS["stat"], description=f"Select {stat}")
            for stat in stats
        ]
        super().__init__(
            placeholder=placeholder,
            min_values=min_values,
            max_values=max_values,
            options=options,
            custom_id=custom_id
        )
    
    async def callback(self, interaction: discord.Interaction):
        await interaction.response.defer()

# Dropdown for tag selection
class TagSelect(discord.ui.Select):
    def __init__(self, placeholder, min_values=1, max_values=1, custom_id="tag_select"):
        tags = get_unique_tags()
        options = [
            discord.SelectOption(label=tag, emoji=EMOJIS["tag"], description=f"Select {tag}")
            for tag in tags
        ]
        super().__init__(
            placeholder=placeholder,
            min_values=min_values,
            max_values=max_values,
            options=options,
            custom_id=custom_id
        )
    
    async def callback(self, interaction: discord.Interaction):
        await interaction.response.defer()

# Main command view with dropdown
class CommandView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(CommandSelect())
    
class CommandSelect(discord.ui.Select):
    def __init__(self):
        options = [
            discord.SelectOption(label="Top Pets", emoji=EMOJIS["top"], description="Show top pets by stat"),
            discord.SelectOption(label="Fuzzy Search", emoji=EMOJIS["fuzzy"], description="Search pets by name"),
            discord.SelectOption(label="Search Pets", emoji=EMOJIS["search"], description="Search by attributes"),
            discord.SelectOption(label="View Pet", emoji=EMOJIS["view"], description="View pet details"),
            discord.SelectOption(label="Report Issue", emoji=EMOJIS["report"], description="Report incorrect data"),
            discord.SelectOption(label="Settings", emoji=EMOJIS["settings"], description="Configure your settings"),
            discord.SelectOption(label="Admin Tools", emoji=EMOJIS["admin"], description="Administrator commands")
        ]
        super().__init__(placeholder="Select a command...", options=options, custom_id="command_select")
    
    async def callback(self, interaction: discord.Interaction):
        command = self.values[0]
        
        if command == "Top Pets":
            view = discord.ui.View()
            view.add_item(StatSelect(placeholder="Select a stat..."))
            await interaction.response.send_message(
                embed=get_embed(
                    f"{EMOJIS['top']} Top Pets",
                    "Please select a stat to sort by:"
                ),
                view=view,
                ephemeral=True
            )
        
        elif command == "Fuzzy Search":
            view = discord.ui.View()
            view.add_item(PetSelect(placeholder="Select a pet...", max_values=10))
            await interaction.response.send_message(
                embed=get_embed(
                    f"{EMOJIS['fuzzy']} Fuzzy Search",
                    "Select up to 10 pets to search:"
                ),
                view=view,
                ephemeral=True
            )
        
        elif command == "Search Pets":
            view = discord.ui.View()
            view.add_item(discord.ui.Select(
                placeholder="Select attribute...",
                options=[
                    discord.SelectOption(label="Rarity", emoji=EMOJIS["rarity"], value="rarity"),
                    discord.SelectOption(label="Tag", emoji=EMOJIS["tag"], value="tag"),
                    discord.SelectOption(label="Limited", emoji=EMOJIS["admin"], value="limited")
                ]
            ))
            await interaction.response.send_message(
                embed=get_embed(
                    f"{EMOJIS['search']} Search Pets",
                    "Select an attribute to search by:"
                ),
                view=view,
                ephemeral=True
            )
        
        elif command == "View Pet":
            view = discord.ui.View()
            view.add_item(PetSelect(placeholder="Select a pet..."))
            await interaction.response.send_message(
                embed=get_embed(
                    f"{EMOJIS['view']} View Pet",
                    "Select a pet to view:"
                ),
                view=view,
                ephemeral=True
            )
        
        elif command == "Report Issue":
            view = discord.ui.View()
            view.add_item(PetSelect(placeholder="Select a pet..."))
            await interaction.response.send_message(
                embed=get_embed(
                    f"{EMOJIS['report']} Report Issue",
                    "Select a pet to report:"
                ),
                view=view,
                ephemeral=True
            )
        
        elif command == "Settings":
            await settings_command(interaction)
        
        elif command == "Admin Tools":
            if not is_admin(interaction):
                await interaction.response.send_message(
                    embed=get_embed(
                        f"{EMOJIS['error']} Permission Denied",
                        "You need admin permissions to access this."
                    ),
                    ephemeral=True
                )
                return
            
            view = discord.ui.View()
            view.add_item(discord.ui.Select(
                placeholder="Select admin command...",
                options=[
                    discord.SelectOption(label="Setup Channels", emoji=EMOJIS["settings"], value="setup"),
                    discord.SelectOption(label="Refresh Data", emoji=EMOJIS["refresh"], value="refresh"),
                    discord.SelectOption(label="Customize Bot", emoji=EMOJIS["settings"], value="customize")
                ]
            ))
            await interaction.response.send_message(
                embed=get_embed(
                    f"{EMOJIS['admin']} Admin Tools",
                    "Select an admin command:"
                ),
                view=view,
                ephemeral=True
            )

# Command functions
async def top_command(interaction: discord.Interaction, stat: str, user_id: int):
    channel_id = get_channel_id("top")
    if not channel_id:
        await interaction.followup.send(
            embed=get_embed(
                f"{EMOJIS['error']} Configuration Error",
                "Top channel not set up. Please contact an admin."
            ),
            ephemeral=True
        )
        return
    
    channel = bot.get_channel(channel_id)
    if not channel:
        await interaction.followup.send(
            embed=get_embed(
                f"{EMOJIS['error']} Channel Not Found",
                "Top channel not found. Please contact an admin."
            ),
            ephemeral=True
        )
        return
    
    # Apply user blacklist
    user_config = user_settings.get(str(user_id), {})
    blacklisted_rarities = user_config.get("blacklist_rarities", [])
    blacklisted_pets = user_config.get("blacklist_pets", [])
    
    # Filter pets
    valid_pets = [
        pet for pet in pet_data.values() 
        if stat in pet["stats"] and 
        pet["rarity"] not in blacklisted_rarities and
        pet["name"] not in blacklisted_pets
    ]
    
    if not valid_pets:
        await interaction.followup.send(
            embed=get_embed(
                f"{EMOJIS['error']} No Pets Found",
                f"No pets found with {stat} stat after applying your blacklist."
            ),
            ephemeral=True
        )
        return
    
    # Sort by stat
    sorted_pets = sorted(valid_pets, key=lambda x: x["stats"][stat], reverse=True)
    
    # Create pages
    pages = []
    for i in range(0, len(sorted_pets), 10):
        page_pets = sorted_pets[i:i+10]
        description = "\n".join(
            f"**{idx + i + 1}.** {pet['name']} - {pet['stats'][stat]:,} {stat} ({pet['rarity']})"
            for idx, pet in enumerate(page_pets)
        )
        pages.append(get_embed(f"{EMOJIS['top']} Top Pets by {stat}", description))
    
    if not pages:
        await interaction.followup.send(
            embed=get_embed(f"{EMOJIS['error']} Error", "No pets found."),
            ephemeral=True
        )
        return
    
    # Send to channel
    await channel.send(embed=pages[0], view=PaginatorView(pages))
    await interaction.followup.send(
        embed=get_embed(
            f"{EMOJIS['success']} Results Sent",
            f"Top pets by {stat} have been sent to {channel.mention}"
        ),
        ephemeral=True
    )

async def fuzzy_command(interaction: discord.Interaction, pets: List[str], user_id: int):
    channel_id = get_channel_id("fuzzy")
    if not channel_id:
        await interaction.followup.send(
            embed=get_embed(
                f"{EMOJIS['error']} Configuration Error",
                "Fuzzy search channel not set up. Please contact an admin."
            ),
            ephemeral=True
        )
        return
    
    channel = bot.get_channel(channel_id)
    if not channel:
        await interaction.followup.send(
            embed=get_embed(
                f"{EMOJIS['error']} Channel Not Found",
                "Fuzzy search channel not found. Please contact an admin."
            ),
            ephemeral=True
        )
        return
    
    # Get pet details
    results = [pet_data[pet_name] for pet_name in pets if pet_name in pet_data]
    
    if not results:
        await interaction.followup.send(
            embed=get_embed(
                f"{EMOJIS['error']} No Pets Found",
                "No pets matched your search."
            ),
            ephemeral=True
        )
        return
    
    # Create embeds
    embeds = []
    for pet in results:
        embed = get_embed(
            f"{EMOJIS['pet']} {pet['name']}",
            f"**Rarity:** {pet['rarity']}\n"
            f"**Tags:** {', '.join(pet.get('tags', []))}\n"
            f"**Limited:** {'Yes' if pet['limited'] else 'No'}\n\n"
            "**Stats:**\n" + "\n".join(f"{k}: {v}" for k, v in pet["stats"].items())
        )
        if pet.get("images"):
            embed.set_thumbnail(url=f"https://ps99.biggamesapi.io/image/{pet['images'][0].replace('rbxassetid://', '')}")
        embeds.append(embed)
    
    # Send to channel
    for embed in embeds:
        await channel.send(embed=embed)
    
    await interaction.followup.send(
        embed=get_embed(
            f"{EMOJIS['success']} Results Sent",
            f"Fuzzy search results have been sent to {channel.mention}"
        ),
        ephemeral=True
    )

async def view_command(interaction: discord.Interaction, pet_name: str, user_id: int):
    channel_id = get_channel_id("view")
    if not channel_id:
        await interaction.followup.send(
            embed=get_embed(
                f"{EMOJIS['error']} Configuration Error",
                "View channel not set up. Please contact an admin."
            ),
            ephemeral=True
        )
        return
    
    channel = bot.get_channel(channel_id)
    if not channel:
        await interaction.followup.send(
            embed=get_embed(
                f"{EMOJIS['error']} Channel Not Found",
                "View channel not found. Please contact an admin."
            ),
            ephemeral=True
        )
        return
    
    pet = pet_data.get(pet_name)
    if not pet:
        matches = fuzzy_search(pet_name, list(pet_data.keys()))
        if matches:
            pet = pet_data[matches[0]]
            pet_name = matches[0]
    
    if not pet:
        await interaction.followup.send(
            embed=get_embed(
                f"{EMOJIS['error']} Pet Not Found",
                f"Pet '{pet_name}' not found."
            ),
            ephemeral=True
        )
        return
    
    variants = get_pet_variants(pet_name)
    if not variants:
        await interaction.followup.send(
            embed=get_embed(
                f"{EMOJIS['error']} No Variants",
                f"No variants found for {pet_name}."
            ),
            ephemeral=True
        )
        return
    
    # Send each variant to channel
    for variant_name, variant_data in variants.items():
        if variant_data["image"]:
            stats_desc = "\n".join(f"{stat}: {value:,}" for stat, value in variant_data["stats"].items())
            
            # Build description
            description_lines = [
                f"**Rarity:** {pet['rarity']}",
                f"**Type:** {variant_name}",
                "",
                f"**Stats:**",
                stats_desc,
                ""
            ]
            if pet.get('tags'):
                description_lines.append(f"**Tags:** {', '.join(pet['tags'])}")
            description_lines.append(f"**Limited:** {'Yes' if pet['limited'] else 'No'}")
            description = "\n".join(description_lines)
            
            emb = get_embed(
                f"{EMOJIS['view']} {pet_name} - {variant_name}",
                description
            )
            emb.set_thumbnail(url=variant_data["image"])
            await channel.send(embed=emb)
    
    await interaction.followup.send(
        embed=get_embed(
            f"{EMOJIS['success']} Pet Viewed",
            f"{pet_name} details have been sent to {channel.mention}"
        ),
        ephemeral=True
    )

async def report_command(interaction: discord.Interaction, pet_name: str, issue: str, user_id: int):
    channel_id = get_channel_id("report")
    if not channel_id:
        await interaction.followup.send(
            embed=get_embed(
                f"{EMOJIS['error']} Configuration Error",
                "Report channel not set up. Please contact an admin."
            ),
            ephemeral=True
        )
        return
    
    channel = bot.get_channel(channel_id)
    if not channel:
        await interaction.followup.send(
            embed=get_embed(
                f"{EMOJIS['error']} Channel Not Found",
                "Report channel not found. Please contact an admin."
            ),
            ephemeral=True
        )
        return
    
    embed = get_embed(
        f"{EMOJIS['report']} Data Issue Report",
        f"**Pet:** {pet_name}\n"
        f"**Reported by:** {interaction.user.mention}\n"
        f"**Issue:** {issue}\n\n"
        "Please provide a screenshot of the correct data."
    )
    
    await channel.send(embed=embed)
    await interaction.followup.send(
        embed=get_embed(
            f"{EMOJIS['success']} Report Submitted",
            "Your report has been sent to the moderators."
        ),
        ephemeral=True
    )

async def settings_command(interaction: discord.Interaction):
    user_id = str(interaction.user.id)
    
    if user_id not in user_settings:
        user_settings[user_id] = {
            "blacklist": [],
            "blacklist_rarities": [],
            "blacklist_pets": []
        }
    
    # Create settings view
    view = discord.ui.View()
    
    # Blacklist attributes
    view.add_item(discord.ui.Select(
        placeholder="Blacklist Attributes...",
        min_values=0,
        max_values=3,
        options=[
            discord.SelectOption(label="Title", value="title"),
            discord.SelectOption(label="Description", value="description"),
            discord.SelectOption(label="Footer", value="footer")
        ],
        custom_id="attr_blacklist"
    ))
    
    # Blacklist rarities
    rarity_select = RaritySelect(
        placeholder="Blacklist Rarities...",
        min_values=0,
        max_values=len(get_unique_rarities()),
        custom_id="rarity_blacklist"
    )
    view.add_item(rarity_select)
    
    # Blacklist pets
    pet_select = PetSelect(
        placeholder="Blacklist Pets...",
        min_values=0,
        max_values=len(get_sorted_pet_names()),
        custom_id="pet_blacklist"
    )
    view.add_item(pet_select)
    
    await interaction.response.send_message(
        embed=get_embed(
            f"{EMOJIS['settings']} Your Settings",
            "Configure what you want to hide in embeds:\n\n"
            "1. **Blacklist Attributes:** Hide parts of embeds\n"
            "2. **Blacklist Rarities:** Exclude from /top command\n"
            "3. **Blacklist Pets:** Exclude from /top command"
        ),
        view=view,
        ephemeral=True
    )

# Admin commands
async def setup_command(interaction: discord.Interaction):
    if not is_admin(interaction):
        await interaction.response.send_message(
            embed=get_embed(
                f"{EMOJIS['error']} Permission Denied",
                "You need admin permissions to run this command."
            ),
            ephemeral=True
        )
        return
    
    guild = interaction.guild
    
    # Create category
    category = await guild.create_category("Pet Stats Bot")
    
    # Create channels
    channels = {}
    for channel_type in ["top", "fuzzy", "search", "view", "report", "settings"]:
        channel = await guild.create_text_channel(
            f"bot-{channel_type}",
            category=category,
            topic=f"Channel for {channel_type} command outputs"
        )
        channels[channel_type] = channel.id
    
    # Update config
    config["channels"] = channels
    save_config(config)
    
    # Send control panel
    control_channel = await guild.create_text_channel(
        "bot-controls",
        category=category,
        topic="Control panel for pet stats bot"
    )
    
    embed = get_embed(
        f"{EMOJIS['settings']} Pet Stats Control Panel",
        "Use the dropdown below to interact with the bot."
    )
    await control_channel.send(embed=embed, view=CommandView())
    
    await interaction.response.send_message(
        embed=get_embed(
            f"{EMOJIS['success']} Setup Complete",
            f"All channels have been created in {category.mention}"
        ),
        ephemeral=True
    )

async def refresh_command(interaction: discord.Interaction):
    if not is_admin(interaction):
        await interaction.response.send_message(
            embed=get_embed(
                f"{EMOJIS['error']} Permission Denied",
                "You need admin permissions to run this command."
            ),
            ephemeral=True
        )
        return
    
    global pet_data
    pet_data = load_pet_data()
    await interaction.response.send_message(
        embed=get_embed(
            f"{EMOJIS['refresh']} Data Refreshed",
            f"Reloaded data for {len(pet_data)} pets."
        ),
        ephemeral=True
    )

# Event handlers
@bot.event
async def on_ready():
    print(f"Logged in as {bot.user.name} ({bot.user.id})")
    try:
        synced = await bot.tree.sync()
        print(f"Synced {len(synced)} commands")
        
        # Add persistent views
        bot.add_view(CommandView())
    except Exception as e:
        print(f"Error syncing commands: {e}")

@bot.event
async def on_interaction(interaction: discord.Interaction):
    # Handle select menu interactions
    if interaction.data.get("component_type") == 3:  # Select menu
        custom_id = interaction.data.get("custom_id")
        values = interaction.data.get("values", [])
        
        if custom_id == "command_select":
            # Already handled in CommandSelect
            return
        
        elif custom_id == "stat_select":
            await top_command(interaction, values[0], interaction.user.id)
        
        elif custom_id == "pet_select":
            if "fuzzy" in interaction.message.embeds[0].title:
                await fuzzy_command(interaction, values, interaction.user.id)
            elif "view" in interaction.message.embeds[0].title:
                await view_command(interaction, values[0], interaction.user.id)
            elif "report" in interaction.message.embeds[0].title:
                # For report, we need to ask for issue description
                await interaction.response.send_modal(ReportModal(values[0]))
        
        elif custom_id == "attr_blacklist":
            user_id = str(interaction.user.id)
            if user_id not in user_settings:
                user_settings[user_id] = {"blacklist": []}
            user_settings[user_id]["blacklist"] = values
            save_user_settings(user_settings)
            await interaction.response.send_message(
                embed=get_embed(
                    f"{EMOJIS['success']} Settings Updated",
                    f"Blacklisted attributes: {', '.join(values) or 'None'}"
                ),
                ephemeral=True
            )
        
        elif custom_id == "rarity_blacklist":
            user_id = str(interaction.user.id)
            if user_id not in user_settings:
                user_settings[user_id] = {"blacklist_rarities": []}
            user_settings[user_id]["blacklist_rarities"] = values
            save_user_settings(user_settings)
            await interaction.response.send_message(
                embed=get_embed(
                    f"{EMOJIS['success']} Settings Updated",
                    f"Blacklisted rarities: {', '.join(values) or 'None'}"
                ),
                ephemeral=True
            )
        
        elif custom_id == "pet_blacklist":
            user_id = str(interaction.user.id)
            if user_id not in user_settings:
                user_settings[user_id] = {"blacklist_pets": []}
            user_settings[user_id]["blacklist_pets"] = values
            save_user_settings(user_settings)
            await interaction.response.send_message(
                embed=get_embed(
                    f"{EMOJIS['success']} Settings Updated",
                    f"Blacklisted pets: {', '.join(values) or 'None'}"
                ),
                ephemeral=True
            )
        
        elif custom_id == "admin_select":
            if values[0] == "setup":
                await setup_command(interaction)
            elif values[0] == "refresh":
                await refresh_command(interaction)
            elif values[0] == "customize":
                await interaction.response.send_modal(CustomizeModal())

# Modals
class ReportModal(discord.ui.Modal, title="Report Issue"):
    def __init__(self, pet_name):
        super().__init__()
        self.pet_name = pet_name
        self.issue = discord.ui.TextInput(
            label="Describe the issue",
            style=discord.TextStyle.long,
            placeholder="What's wrong with this pet's data?",
            required=True
        )
        self.add_item(self.issue)
    
    async def on_submit(self, interaction: discord.Interaction):
        await report_command(interaction, self.pet_name, self.issue.value, interaction.user.id)

class CustomizeModal(discord.ui.Modal, title="Customize Bot"):
    def __init__(self):
        super().__init__()
        self.embed_color = discord.ui.TextInput(
            label="Embed Color (hex)",
            placeholder="#3498db",
            required=False
        )
        self.add_item(self.embed_color)
    
    async def on_submit(self, interaction: discord.Interaction):
        if not is_admin(interaction):
            await interaction.response.send_message(
                embed=get_embed(
                    f"{EMOJIS['error']} Permission Denied",
                    "You need admin permissions to run this command."
                ),
                ephemeral=True
            )
            return
        
        if self.embed_color.value:
            try:
                color_str = self.embed_color.value.strip()
                if color_str.startswith("#"):
                    color_str = color_str[1:]
                color = int(color_str, 16)
                config["embed_color"] = color
                save_config(config)
                await interaction.response.send_message(
                    embed=get_embed(
                        f"{EMOJIS['success']} Settings Updated",
                        f"Embed color set to #{hex(color)[2:].zfill(6)}"
                    ),
                    ephemeral=True
                )
            except ValueError:
                await interaction.response.send_message(
                    embed=get_embed(
                        f"{EMOJIS['error']} Invalid Color",
                        "Please use a valid hex color code (e.g., #3498db)"
                    ),
                    ephemeral=True
                )
        else:
            await interaction.response.send_message(
                embed=get_embed(
                    f"{EMOJIS['info']} No Changes",
                    "No settings were updated."
                ),
                ephemeral=True
            )

# Paginator View
class PaginatorView(discord.ui.View):
    def __init__(self, pages):
        super().__init__(timeout=180)
        self.pages = pages
        self.current_page = 0
        self.max_page = len(pages) - 1
        self.update_buttons()
    
    def update_buttons(self):
        self.first_page.disabled = self.current_page == 0
        self.prev_page.disabled = self.current_page == 0
        self.next_page.disabled = self.current_page == self.max_page
        self.last_page.disabled = self.current_page == self.max_page
        self.page_num.label = f"Page {self.current_page + 1}/{len(self.pages)}"
    
    @discord.ui.button(label="<<", style=discord.ButtonStyle.grey)
    async def first_page(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.current_page = 0
        self.update_buttons()
        await interaction.response.edit_message(embed=self.pages[self.current_page], view=self)
    
    @discord.ui.button(label="<", style=discord.ButtonStyle.grey)
    async def prev_page(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.current_page = max(0, self.current_page - 1)
        self.update_buttons()
        await interaction.response.edit_message(embed=self.pages[self.current_page], view=self)
    
    @discord.ui.button(label="Page 1/1", style=discord.ButtonStyle.grey, disabled=True)
    async def page_num(self, interaction: discord.Interaction, button: discord.ui.Button):
        pass
    
    @discord.ui.button(label=">", style=discord.ButtonStyle.grey)
    async def next_page(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.current_page = min(self.max_page, self.current_page + 1)
        self.update_buttons()
        await interaction.response.edit_message(embed=self.pages[self.current_page], view=self)
    
    @discord.ui.button(label=">>", style=discord.ButtonStyle.grey)
    async def last_page(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.current_page = self.max_page
        self.update_buttons()
        await interaction.response.edit_message(embed=self.pages[self.current_page], view=self)

# Slash commands
@bot.tree.command(name="setup", description="Setup bot channels (Admin only)")
async def setup_slash(interaction: discord.Interaction):
    await setup_command(interaction)

@bot.tree.command(name="petstats", description="Open the pet stats interface")
async def petstats(interaction: discord.Interaction):
    await interaction.response.send_message(
        embed=get_embed(
            f"{EMOJIS['pet']} Pet Stats",
            "Use the dropdown below to access all commands"
        ),
        view=CommandView(),
        ephemeral=True
    )

@bot.tree.command(name="refresh", description="Refresh pet data (Admin only)")
async def refresh_slash(interaction: discord.Interaction):
    await refresh_command(interaction)

# Run bot
if __name__ == "__main__":
    bot.run("YOUR_BOT_TOKEN_HERE")  # Replace with your bot token
